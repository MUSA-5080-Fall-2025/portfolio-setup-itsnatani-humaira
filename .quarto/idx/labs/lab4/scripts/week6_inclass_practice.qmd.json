{"title":"Week 6 In-Class Practice Exercises","markdown":{"yaml":{"title":"Week 6 In-Class Practice Exercises","subtitle":"Spatial Machine Learning and Advance Regression","author":"Itsnatani Anaqami","date":"13 October 2025","format":{"html":{"code-fold":false,"toc":true,"toc-location":"left","theme":"cosmo"}},"execute":{"warning":false,"message":false}},"headingText":"Setup","containsRefs":false,"markdown":"\n\n```{r}\n# Load packages and data\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(here)\n\n# Load Boston housing data\nboston <- read_csv(here(\"C:/NATAN/PENN/2025 FALL/Public Policy Analytics/portfolio-setup-itsnatani-humaira/labs/lab4/scripts/data/boston.csv\"))\n\n# Quick look at the data\nglimpse(boston)\n\n```\n\n```{r}\n# Simple model: Predict price from living area\nbaseline_model <- lm(SalePrice ~ LivingArea, data = boston)\nsummary(baseline_model)\n```\n```{r}\n# Add number of bathrooms\nbetter_model <- lm(SalePrice ~ LivingArea + R_FULL_BTH, data = boston)\nsummary(better_model)\n```\n```{r}\n# Compare models\ncat(\"Baseline R²:\", summary(baseline_model)$r.squared, \"\\n\")\ncat(\"With bathrooms R²:\", summary(better_model)$r.squared, \"\\n\")\n```\n```{r}\nlibrary(sf)\n\n# Convert boston data to sf object\nboston.sf <- boston %>%\n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) %>%\n  st_transform('ESRI:102286')  # MA State Plane (feet)\n\n# Check it worked\nhead(boston.sf)\n```\n```{r}\nclass(boston.sf)  # Should show \"sf\" and \"data.frame\"\n```\n```{r}\n# Load neighborhood boundaries\nnhoods <- read_sf(here(\"data/BPDA_Neighborhood_Boundaries.geojson\")) %>%\n  st_transform('ESRI:102286')  # Match CRS!\n\n# Check the neighborhoods\nhead(nhoods)\n\nnrow(nhoods)  # How many neighborhoods?\n\n# Spatial join: Assign each house to its neighborhood\nboston.sf <- boston.sf %>%\n  st_join(nhoods, join = st_intersects)\n\n# Check results\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(name) %>%\n  arrange(desc(n))\n```\n\n\n```{r}\nst_join()\n# Which neighborhoods are most expensive?\nprice_by_nhood %>%\n  arrange(desc(median_price)) %>%\n  head(5)\n# Which have most sales?\nprice_by_nhood %>%\n  arrange(desc(n_sales)) %>%\n  head(5)\n```\n```{r}\n# Ensure name is a factor\nboston.sf <- boston.sf %>%\n  mutate(name = as.factor(name))\n\n# Check which is reference (first alphabetically)\nlevels(boston.sf$name)[1]\n\n# Fit model with neighborhood fixed effects\nmodel_neighborhoods <- lm(SalePrice ~ LivingArea + name, \n                          data = boston.sf)\n\n# Show just first 10 coefficients\nsummary(model_neighborhoods)$coef[1:10, ]\n```\n\n```{r}\n# Define wealthy neighborhoods based on median prices\nwealthy_hoods <- c(\"Back Bay\", \"Beacon Hill\", \"South End\", \"Bay Village\")\n\n# Create binary indicator\nboston.sf <- boston.sf %>%\n  mutate(\n    wealthy_neighborhood = ifelse(name %in% wealthy_hoods, \"Wealthy\", \"Not Wealthy\"),\n    wealthy_neighborhood = as.factor(wealthy_neighborhood)\n  )\n\n# Check the split\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(wealthy_neighborhood)\n```\n\n\n```{r}\n# Model assumes same slope everywhere\nmodel_no_interact <- lm(SalePrice ~ LivingArea + wealthy_neighborhood, \n                        data = boston.sf)\n\nsummary(model_no_interact)$coef\n```\n\n```{r}\n# Model allows different slopes\nmodel_interact <- lm(SalePrice ~ LivingArea * wealthy_neighborhood, \n                     data = boston.sf)\n\nsummary(model_interact)$coef\n```\n\n```{r}\n# Compare R-squared\ncat(\"Model WITHOUT interaction R²:\", round(summary(model_no_interact)$r.squared, 4), \"\\n\")\ncat(\"Model WITH interaction R²:\", round(summary(model_interact)$r.squared, 4), \"\\n\")\ncat(\"Improvement:\", round(summary(model_interact)$r.squared - summary(model_no_interact)$r.squared, 4), \"\\n\")\n```\n\n```{r}\n# Calculate age from year built\nboston.sf <- boston.sf %>%\n  mutate(Age = 2025 - YR_BUILT)%>% filter(Age <2000)\n\n\n# Check the distribution of age\nsummary(boston.sf$Age)\n\n# Visualize age distribution\nggplot(boston.sf, aes(x = Age)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", alpha = 0.7) +\n  labs(title = \"Distribution of House Age in Boston\",\n       x = \"Age (years)\",\n       y = \"Count\") +\n  theme_minimal()\n```\n```{r}\n# Simple linear relationship\nmodel_age_linear <- lm(SalePrice ~ Age + LivingArea, data = boston.sf)\n\nsummary(model_age_linear)$coef\n```\n\n```{r}\n# Quadratic model (Age²)\nmodel_age_quad <- lm(SalePrice ~ Age + I(Age^2) + LivingArea, data = boston.sf)\n\nsummary(model_age_quad)$coef\n```\n```{r}\n# R-squared comparison\nr2_linear <- summary(model_age_linear)$r.squared\nr2_quad <- summary(model_age_quad)$r.squared\n\ncat(\"Linear model R²:\", round(r2_linear, 4), \"\\n\")\n\ncat(\"Quadratic model R²:\", round(r2_quad, 4), \"\\n\")\n\ncat(\"Improvement:\", round(r2_quad - r2_linear, 4), \"\\n\\n\")\n\n# F-test: Is the Age² term significant?\nanova(model_age_linear, model_age_quad)\n```\n```{r}\n# Compare residual plots\npar(mfrow = c(1, 2))\n\n# Linear model residuals\nplot(fitted(model_age_linear), residuals(model_age_linear),\n     main = \"Linear Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n\n# Quadratic model residuals  \nplot(fitted(model_age_quad), residuals(model_age_quad),\n     main = \"Quadratic Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n```{r}\nbostonCrimes <- read_csv(here(\"C:/NATAN/PENN/2025 FALL/Public Policy Analytics/portfolio-setup-itsnatani-humaira/labs/lab4/scripts/data/bostonCrimes.csv\"))\n\ncrime.sf <- bostonCrimes %>%\n  st_as_sf(coords = c(\"Long\", \"Lat\"), crs = \"EPSG:4326\") %>%\n  st_transform('ESRI:102286')  # MA State Plane (feet)\n\n# Create buffer features - these will work now that CRS is correct\nboston.sf <- boston.sf %>%\n  mutate(\n    crimes.Buffer = lengths(st_intersects(\n      st_buffer(geometry, 660),\n      crimes.sf\n    )),\n    crimes_500ft = lengths(st_intersects(\n      st_buffer(geometry, 500),\n      crimes.sf\n    ))\n  )\n\n# Check it worked\nsummary(boston.sf$crimes.Buffer)\n```\n```{r}\n# Calculate distance matrix (houses to crimes)\ndist_matrix <- st_distance(boston.sf, crimes.sf)\n\n# Function to get mean distance to k nearest neighbors\nget_knn_distance <- function(dist_matrix, k) {\n  apply(dist_matrix, 1, function(distances) {\n    # Sort and take first k, then average\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create multiple kNN features\nboston.sf <- boston.sf %>%\n  mutate(\n    crime_nn1 = get_knn_distance(dist_matrix, k = 1),\n    crime_nn3 = get_knn_distance(dist_matrix, k = 3),\n    crime_nn5 = get_knn_distance(dist_matrix, k = 5)\n  )\n\n# Check results\nsummary(boston.sf %>% st_drop_geometry() %>% select(starts_with(\"crime_nn\")))\n```\n```{r}\n# Which k value correlates most with price?\nboston.sf %>%\n  st_drop_geometry() %>%\n  select(SalePrice, crime_nn1, crime_nn3, crime_nn5) %>%\n  cor(use = \"complete.obs\") %>%\n  as.data.frame() %>%\n  select(SalePrice)\n```\n\n","srcMarkdownNoYaml":"\n\n## Setup\n```{r}\n# Load packages and data\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(here)\n\n# Load Boston housing data\nboston <- read_csv(here(\"C:/NATAN/PENN/2025 FALL/Public Policy Analytics/portfolio-setup-itsnatani-humaira/labs/lab4/scripts/data/boston.csv\"))\n\n# Quick look at the data\nglimpse(boston)\n\n```\n\n```{r}\n# Simple model: Predict price from living area\nbaseline_model <- lm(SalePrice ~ LivingArea, data = boston)\nsummary(baseline_model)\n```\n```{r}\n# Add number of bathrooms\nbetter_model <- lm(SalePrice ~ LivingArea + R_FULL_BTH, data = boston)\nsummary(better_model)\n```\n```{r}\n# Compare models\ncat(\"Baseline R²:\", summary(baseline_model)$r.squared, \"\\n\")\ncat(\"With bathrooms R²:\", summary(better_model)$r.squared, \"\\n\")\n```\n```{r}\nlibrary(sf)\n\n# Convert boston data to sf object\nboston.sf <- boston %>%\n  st_as_sf(coords = c(\"Longitude\", \"Latitude\"), crs = 4326) %>%\n  st_transform('ESRI:102286')  # MA State Plane (feet)\n\n# Check it worked\nhead(boston.sf)\n```\n```{r}\nclass(boston.sf)  # Should show \"sf\" and \"data.frame\"\n```\n```{r}\n# Load neighborhood boundaries\nnhoods <- read_sf(here(\"data/BPDA_Neighborhood_Boundaries.geojson\")) %>%\n  st_transform('ESRI:102286')  # Match CRS!\n\n# Check the neighborhoods\nhead(nhoods)\n\nnrow(nhoods)  # How many neighborhoods?\n\n# Spatial join: Assign each house to its neighborhood\nboston.sf <- boston.sf %>%\n  st_join(nhoods, join = st_intersects)\n\n# Check results\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(name) %>%\n  arrange(desc(n))\n```\n\n\n```{r}\nst_join()\n# Which neighborhoods are most expensive?\nprice_by_nhood %>%\n  arrange(desc(median_price)) %>%\n  head(5)\n# Which have most sales?\nprice_by_nhood %>%\n  arrange(desc(n_sales)) %>%\n  head(5)\n```\n```{r}\n# Ensure name is a factor\nboston.sf <- boston.sf %>%\n  mutate(name = as.factor(name))\n\n# Check which is reference (first alphabetically)\nlevels(boston.sf$name)[1]\n\n# Fit model with neighborhood fixed effects\nmodel_neighborhoods <- lm(SalePrice ~ LivingArea + name, \n                          data = boston.sf)\n\n# Show just first 10 coefficients\nsummary(model_neighborhoods)$coef[1:10, ]\n```\n\n```{r}\n# Define wealthy neighborhoods based on median prices\nwealthy_hoods <- c(\"Back Bay\", \"Beacon Hill\", \"South End\", \"Bay Village\")\n\n# Create binary indicator\nboston.sf <- boston.sf %>%\n  mutate(\n    wealthy_neighborhood = ifelse(name %in% wealthy_hoods, \"Wealthy\", \"Not Wealthy\"),\n    wealthy_neighborhood = as.factor(wealthy_neighborhood)\n  )\n\n# Check the split\nboston.sf %>%\n  st_drop_geometry() %>%\n  count(wealthy_neighborhood)\n```\n\n\n```{r}\n# Model assumes same slope everywhere\nmodel_no_interact <- lm(SalePrice ~ LivingArea + wealthy_neighborhood, \n                        data = boston.sf)\n\nsummary(model_no_interact)$coef\n```\n\n```{r}\n# Model allows different slopes\nmodel_interact <- lm(SalePrice ~ LivingArea * wealthy_neighborhood, \n                     data = boston.sf)\n\nsummary(model_interact)$coef\n```\n\n```{r}\n# Compare R-squared\ncat(\"Model WITHOUT interaction R²:\", round(summary(model_no_interact)$r.squared, 4), \"\\n\")\ncat(\"Model WITH interaction R²:\", round(summary(model_interact)$r.squared, 4), \"\\n\")\ncat(\"Improvement:\", round(summary(model_interact)$r.squared - summary(model_no_interact)$r.squared, 4), \"\\n\")\n```\n\n```{r}\n# Calculate age from year built\nboston.sf <- boston.sf %>%\n  mutate(Age = 2025 - YR_BUILT)%>% filter(Age <2000)\n\n\n# Check the distribution of age\nsummary(boston.sf$Age)\n\n# Visualize age distribution\nggplot(boston.sf, aes(x = Age)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", alpha = 0.7) +\n  labs(title = \"Distribution of House Age in Boston\",\n       x = \"Age (years)\",\n       y = \"Count\") +\n  theme_minimal()\n```\n```{r}\n# Simple linear relationship\nmodel_age_linear <- lm(SalePrice ~ Age + LivingArea, data = boston.sf)\n\nsummary(model_age_linear)$coef\n```\n\n```{r}\n# Quadratic model (Age²)\nmodel_age_quad <- lm(SalePrice ~ Age + I(Age^2) + LivingArea, data = boston.sf)\n\nsummary(model_age_quad)$coef\n```\n```{r}\n# R-squared comparison\nr2_linear <- summary(model_age_linear)$r.squared\nr2_quad <- summary(model_age_quad)$r.squared\n\ncat(\"Linear model R²:\", round(r2_linear, 4), \"\\n\")\n\ncat(\"Quadratic model R²:\", round(r2_quad, 4), \"\\n\")\n\ncat(\"Improvement:\", round(r2_quad - r2_linear, 4), \"\\n\\n\")\n\n# F-test: Is the Age² term significant?\nanova(model_age_linear, model_age_quad)\n```\n```{r}\n# Compare residual plots\npar(mfrow = c(1, 2))\n\n# Linear model residuals\nplot(fitted(model_age_linear), residuals(model_age_linear),\n     main = \"Linear Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n\n# Quadratic model residuals  \nplot(fitted(model_age_quad), residuals(model_age_quad),\n     main = \"Quadratic Model Residuals\",\n     xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n```{r}\nbostonCrimes <- read_csv(here(\"C:/NATAN/PENN/2025 FALL/Public Policy Analytics/portfolio-setup-itsnatani-humaira/labs/lab4/scripts/data/bostonCrimes.csv\"))\n\ncrime.sf <- bostonCrimes %>%\n  st_as_sf(coords = c(\"Long\", \"Lat\"), crs = \"EPSG:4326\") %>%\n  st_transform('ESRI:102286')  # MA State Plane (feet)\n\n# Create buffer features - these will work now that CRS is correct\nboston.sf <- boston.sf %>%\n  mutate(\n    crimes.Buffer = lengths(st_intersects(\n      st_buffer(geometry, 660),\n      crimes.sf\n    )),\n    crimes_500ft = lengths(st_intersects(\n      st_buffer(geometry, 500),\n      crimes.sf\n    ))\n  )\n\n# Check it worked\nsummary(boston.sf$crimes.Buffer)\n```\n```{r}\n# Calculate distance matrix (houses to crimes)\ndist_matrix <- st_distance(boston.sf, crimes.sf)\n\n# Function to get mean distance to k nearest neighbors\nget_knn_distance <- function(dist_matrix, k) {\n  apply(dist_matrix, 1, function(distances) {\n    # Sort and take first k, then average\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create multiple kNN features\nboston.sf <- boston.sf %>%\n  mutate(\n    crime_nn1 = get_knn_distance(dist_matrix, k = 1),\n    crime_nn3 = get_knn_distance(dist_matrix, k = 3),\n    crime_nn5 = get_knn_distance(dist_matrix, k = 5)\n  )\n\n# Check results\nsummary(boston.sf %>% st_drop_geometry() %>% select(starts_with(\"crime_nn\")))\n```\n```{r}\n# Which k value correlates most with price?\nboston.sf %>%\n  st_drop_geometry() %>%\n  select(SalePrice, crime_nn1, crime_nn3, crime_nn5) %>%\n  cor(use = \"complete.obs\") %>%\n  as.data.frame() %>%\n  select(SalePrice)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"week6_inclass_practice.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":"cosmo","title":"Week 6 In-Class Practice Exercises","subtitle":"Spatial Machine Learning and Advance Regression","author":"Itsnatani Anaqami","date":"13 October 2025","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}