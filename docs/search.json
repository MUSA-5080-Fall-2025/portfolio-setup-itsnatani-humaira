[
  {
    "objectID": "weekly-notes/week-04-notes.html",
    "href": "weekly-notes/week-04-notes.html",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "",
    "text": "Part 1: Why Spatial Analysis Matters\nGeographic bias in algorithms: - Training data may under-represent certain areas - Spatial autocorrelation violates independence assumptions - Service delivery algorithms may reinforce geographic inequities\nExamples: - Rideshare algorithms avoiding certain neighborhoods - Crime prediction concentrating enforcement in specific areas - Social service algorithms missing rural communities\n–&gt; Understand spatial patterns to help design fairer systems\nPart 2: Spatial Data Fundamentals\nVector Data Model –&gt; we represent the real world in simplified geometric representation. There are three basic types: 1. Points → Locations (schools, hospitals, crime incidents) 2. Lines → Linear features (roads, rivers, transit routes) 3. Polygons → Areas (census tracts, neighborhoods, service areas)\nEach feature has: 1. Geometry → Shape and location 2. Attributes → Data about that feature (population, income, etc.)\nThe format of the spatial data is commonly SHAPEFILE. SHAPEFILE consisted of .shp, .shx, and .dbf. The other format is geojson, kml/KMZ (Google Earth), and Database connections (PostGIS).\n–&gt; The sf Package: Simple Features for R - Modern replacement for older spatial packages - Integrates with tidyverse workflows - Follows international standards - Fast and reliable\nPart 3: Spatial Operations\nThe .predicate tells st_filter() what spatial relationship to look for:\nr predicate-structure # Basic structure: st_filter(data_to_filter, reference_geometry, .predicate = relationship)\nDifferent questions need different relationships:\n“Which counties border Allegheny?” → st_touches “Which tracts are IN Allegheny?” → st_within “Which tracts overlap a metro area?” → st_intersects Default: If no .predicate specified, uses st_intersects\nFor county neighbors, why st_touches not st_intersects? Because st_intersects includes the reference feature itself.\nst_intersects() Any overlap at all “Counties affected by flooding” st_touches() Share boundary, no interior overlap “Neighboring counties” st_within() Completely inside “Schools within district boundaries” st_contains() Completely contains “Districts containing hospitals” st_overlaps() Partial overlap “Overlapping service areas” st_disjoint() No spatial relationship “Counties separate from urban areas”\nMost common: st_intersects() (any overlap) and st_touches() (neighbors)\nPart 4: Geometry Operations\nCreate zones around features\n`{r buffers} # 10km buffer around all hospitals hospital_buffers &lt;- hospitals %&gt;% st_buffer(dist = 10000) # 10,000 meters\nDifferent buffer sizes by hospital type hospital_buffers &lt;- hospitals %&gt;% mutate( buffer_size = case_when( type == “Major Medical Center” ~ 15000, type == “Community Hospital” ~ 10000, type == “Clinic” ~ 5000 ) ) %&gt;% st_buffer(dist = .$buffer_size) `\nPolicy application: Service accessibility zones, environmental impact areas\n–&gt; Intersection Operations Find overlapping areas:\nThe Key Difference st_filter() with predicates: Selects complete features (keeps or removes entire rows) st_intersection() and st_union(): Modifies geometries (creates new shapes)\nUse st_filter() when: - “Which census tracts touch hospital service areas?” - You want to select/identify features based on location - You need complete features with their original boundaries - You’re counting: “How many tracts are near hospitals?”\nUse st_intersection() when: - “What is the area of overlap between tracts and service zones?” - You need to calculate areas, populations, or other measures within specific boundaries - You’re doing spatial overlay analysis - You need to clip data to a study area\nPart 5: Coordinate Reference Systems\nWhy projection matters? Because the Earth is round, maps are flat.\nProblems: - Can’t preserve area, distance, and angles simultaneously - Different projections optimize different properties - Wrong projection → wrong analysis results!\nGeographic Coordinate Systems (GCS): - Latitude/longitude coordinates - Units: decimal degrees - Good for: Global datasets, web mapping - Bad for: Area/distance calculations\nProjected Coordinate Systems (PCS): - X/Y coordinates on a flat plane - Units: meters, feet, etc. - Good for: Local analysis, accurate measurements - Bad for: Large areas, global datasets\nCommon Coordinate Reference Systems - WGS84 (EPSG:4326) - Web Mercator (EPSG:3857) - State Plane / UTM zones\nChecking and Setting CRS\nTo simply check current CRS st_crs(pa_counties) To set CRS (ONLY if missing) pa_counties &lt;- st_set_crs(pa_counties, 4326) Transform to different CRS\nPennsylvania South State Plane (good for PA analysis) pa_counties_projected &lt;- pa_counties %&gt;% st_transform(crs = 3365)\nTransform to Albers Equal Area (good for area calculations) pa_counties_albers &lt;- pa_counties %&gt;% st_transform(crs = 5070) `\nPart 6: Conclusion\nPolicy Analysis Workflow Typical spatial analysis steps:\nLoad data → Get spatial boundaries and attribute data Check projections → Transform to appropriate CRS Join datasets → Combine spatial and non-spatial data Spatial operations → Buffers, intersections, distance calculations Aggregation → Summarize across spatial units Visualization → Maps and charts Interpretation → Policy recommendations"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#key-concepts-learned",
    "href": "weekly-notes/week-04-notes.html#key-concepts-learned",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "",
    "text": "Part 1: Why Spatial Analysis Matters\nGeographic bias in algorithms: - Training data may under-represent certain areas - Spatial autocorrelation violates independence assumptions - Service delivery algorithms may reinforce geographic inequities\nExamples: - Rideshare algorithms avoiding certain neighborhoods - Crime prediction concentrating enforcement in specific areas - Social service algorithms missing rural communities\n–&gt; Understand spatial patterns to help design fairer systems\nPart 2: Spatial Data Fundamentals\nVector Data Model –&gt; we represent the real world in simplified geometric representation. There are three basic types: 1. Points → Locations (schools, hospitals, crime incidents) 2. Lines → Linear features (roads, rivers, transit routes) 3. Polygons → Areas (census tracts, neighborhoods, service areas)\nEach feature has: 1. Geometry → Shape and location 2. Attributes → Data about that feature (population, income, etc.)\nThe format of the spatial data is commonly SHAPEFILE. SHAPEFILE consisted of .shp, .shx, and .dbf. The other format is geojson, kml/KMZ (Google Earth), and Database connections (PostGIS).\n–&gt; The sf Package: Simple Features for R - Modern replacement for older spatial packages - Integrates with tidyverse workflows - Follows international standards - Fast and reliable\nPart 3: Spatial Operations\nThe .predicate tells st_filter() what spatial relationship to look for:\nr predicate-structure # Basic structure: st_filter(data_to_filter, reference_geometry, .predicate = relationship)\nDifferent questions need different relationships:\n“Which counties border Allegheny?” → st_touches “Which tracts are IN Allegheny?” → st_within “Which tracts overlap a metro area?” → st_intersects Default: If no .predicate specified, uses st_intersects\nFor county neighbors, why st_touches not st_intersects? Because st_intersects includes the reference feature itself.\nst_intersects() Any overlap at all “Counties affected by flooding” st_touches() Share boundary, no interior overlap “Neighboring counties” st_within() Completely inside “Schools within district boundaries” st_contains() Completely contains “Districts containing hospitals” st_overlaps() Partial overlap “Overlapping service areas” st_disjoint() No spatial relationship “Counties separate from urban areas”\nMost common: st_intersects() (any overlap) and st_touches() (neighbors)\nPart 4: Geometry Operations\nCreate zones around features\n`{r buffers} # 10km buffer around all hospitals hospital_buffers &lt;- hospitals %&gt;% st_buffer(dist = 10000) # 10,000 meters\nDifferent buffer sizes by hospital type hospital_buffers &lt;- hospitals %&gt;% mutate( buffer_size = case_when( type == “Major Medical Center” ~ 15000, type == “Community Hospital” ~ 10000, type == “Clinic” ~ 5000 ) ) %&gt;% st_buffer(dist = .$buffer_size) `\nPolicy application: Service accessibility zones, environmental impact areas\n–&gt; Intersection Operations Find overlapping areas:\nThe Key Difference st_filter() with predicates: Selects complete features (keeps or removes entire rows) st_intersection() and st_union(): Modifies geometries (creates new shapes)\nUse st_filter() when: - “Which census tracts touch hospital service areas?” - You want to select/identify features based on location - You need complete features with their original boundaries - You’re counting: “How many tracts are near hospitals?”\nUse st_intersection() when: - “What is the area of overlap between tracts and service zones?” - You need to calculate areas, populations, or other measures within specific boundaries - You’re doing spatial overlay analysis - You need to clip data to a study area\nPart 5: Coordinate Reference Systems\nWhy projection matters? Because the Earth is round, maps are flat.\nProblems: - Can’t preserve area, distance, and angles simultaneously - Different projections optimize different properties - Wrong projection → wrong analysis results!\nGeographic Coordinate Systems (GCS): - Latitude/longitude coordinates - Units: decimal degrees - Good for: Global datasets, web mapping - Bad for: Area/distance calculations\nProjected Coordinate Systems (PCS): - X/Y coordinates on a flat plane - Units: meters, feet, etc. - Good for: Local analysis, accurate measurements - Bad for: Large areas, global datasets\nCommon Coordinate Reference Systems - WGS84 (EPSG:4326) - Web Mercator (EPSG:3857) - State Plane / UTM zones\nChecking and Setting CRS\nTo simply check current CRS st_crs(pa_counties) To set CRS (ONLY if missing) pa_counties &lt;- st_set_crs(pa_counties, 4326) Transform to different CRS\nPennsylvania South State Plane (good for PA analysis) pa_counties_projected &lt;- pa_counties %&gt;% st_transform(crs = 3365)\nTransform to Albers Equal Area (good for area calculations) pa_counties_albers &lt;- pa_counties %&gt;% st_transform(crs = 5070) `\nPart 6: Conclusion\nPolicy Analysis Workflow Typical spatial analysis steps:\nLoad data → Get spatial boundaries and attribute data Check projections → Transform to appropriate CRS Join datasets → Combine spatial and non-spatial data Spatial operations → Buffers, intersections, distance calculations Aggregation → Summarize across spatial units Visualization → Maps and charts Interpretation → Policy recommendations"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#coding-techniques",
    "href": "weekly-notes/week-04-notes.html#coding-techniques",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "Coding Techniques",
    "text": "Coding Techniques\n\nExtract features based on spatial relationships: st_filter(), st_intersects(), st_touches(), st_within()\nr predicate-structure Basic structure: t_filter(data_to_filter, reference_geometry, .predicate = relationship)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#questions-challenges",
    "href": "weekly-notes/week-04-notes.html#questions-challenges",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "Questions & Challenges",
    "text": "Questions & Challenges\n\n[What I didn’t fully understand]\n[Areas needing more practice]"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#connections-to-policy",
    "href": "weekly-notes/week-04-notes.html#connections-to-policy",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "Connections to Policy",
    "text": "Connections to Policy\n\n[How this week’s content applies to real policy work]"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#reflection",
    "href": "weekly-notes/week-04-notes.html#reflection",
    "title": "Week 4 Notes - Spatial Data & GIS Operations in R",
    "section": "Reflection",
    "text": "Reflection\n\n[What was most interesting]\n[How I’ll apply this knowledge]"
  }
]